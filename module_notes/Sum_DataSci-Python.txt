数据分析
matlab
Python
一、Numpy是什么？
1.Numrical Python，数值的Python，应用于数值分析领域的Python语言工具；
2.Numpy是一个开源的科学计算库；
3.Numpy弥补了作为通用编程语言的Python在数值计算方面，能力弱，速度慢的不足；
4.Numpy拥有丰富的数学函数、强大的多维数组和优异的运算性能；
5.Numpy与Scipy、scikit、matplotlib等其它科学计算库可以很好地协调工作；
6.Numpy可以取代matlab等工具，允许用户进行快速开发的同时完成交互式的原型设计。
代码：vector.py

二、多维数组
1.numpy中的多维数组是numpy.ndarray类类型的对象，可用于表示数据结构中的任意维度的数组；
2.创建多维数组对象：
numpy.arange(起始, 终止, 步长)->一维数组，首元素就是起始值，尾元素为终止值之前的最后一个元素，步长即每次递增的公差。缺省起始值为0，缺省步长为1。
numpy.array(任何可被解释为数组的容器)
3.内存连续，元素同质。
4.ndarray.dtype属性表示元素的数据类型。通过dtype参数和astype()方法可以指定和修改元素的数据类型。
5.ndarray.shape属性表示数组的维度：
(高维度数, ..., 低维度数)
代码：array.py
6.元素索引，从0开始
数组[索引]
数组[行索引][列索引]
数组[页索引][行索引][列索引]
数组[页索引, 行索引, 列索引]
代码：index.py
7.numpy的内置类型和自定义类型
1)numpy的内置类型
bool_ 1字节布尔型，True(1)/False(0)
int8 1字节有符号整型，-128 - 127
int16 2字节有符号整型
int32 4字节有符号整型
int64 8字节有符号整型
uint8 1字节无符号整型，0 - 255
uint16 2字节无符号整型
uint32 4字节无符号整型
uint64 8字节无符号整型
float16 2字节浮点型
float32 4字节浮点型
float64 8字节浮点型
complex64 8字节复数型
complex128 16字节复数型
str_ 字符串型
2)自定义类型：通过dtype将多个相同或者不同的numpy内置类型组合成某种复合类型，用于数组元素的数据类型。
除了使用内置类型的全称以外还可以通过类型编码字符串简化类型的说明。
numpy.int8 -> i1
numpy.int16 -> i2
numpy.uint32 -> u4
numpy.float64 -> f8
numpy.complex128 -> c16
对于多字节整数可以加上字节序前缀：
< - 小端字节序，低数位低地址；
98
0x1234
L        H
0x34 0x12
= - 处理器系统默认；
> - 大端字节序，低数位高地址。
L        H
0x12 0x34
numpy.str_ -> U字符数
numpy.bool_ -> b
代码：dtype.py
8.切片
数组[起始:终止:步长, 起始:终止:步长, ...]
缺省起始：首(步长为正)、尾(步长为负)
缺省终止：尾后(步长为正)、首前(步长为负)
缺省步长：1
靠近端部的一个或几个连续的维度使用缺省切片，可以用"..."表示。
代码：slice.py
9.改变维度
1)视图变维：针对一个数组对象获取其不同维度的视图
数组.reshape(新维度)->数组的新维度视图
数组.ravel()->数组的一维视图
2)复制变维：针对一个数组对象获取其不同维度的副本
数组.flatten()->数组的一维副本
3)就地变维
数组.shape = (新维度)
数组.resize(新维度)
4)视图转置
数组.transpose()->数组的转置视图
数组.T: 转置视图属性
至少二维数组才能转置。
代码：reshape.py
10.组合与拆分
1)垂直组合/拆分
numpy.vstack((上, 下))
numpy.vsplit(数组, 份数)->子数组集合
2)水平组合/拆分
numpy.hstack((左, 右))
numpy.hsplit(数组, 份数)->子数组集合
3)深度组合/拆分
numpy.dstack((前, 后))
numpy.dsplit(数组, 份数)->子数组集合
4)行/列组合
numpy.row_stack((上, 下))
numpy.column_stack((左, 右))
代码：stack.py
11.ndarray类的属性
dtype - 元素类型
shape - 数组维度
T - 转置视图
ndim - 维数
size - 元素数, 仅对一维数组等价于len()
itemsize - 元素字节数
nbytes - 总字节数 = size x itemsize
flat - 扁平迭代器
real - 实部数组
imag - 虚部数组
数组.tolist()->列表对象
代码：attr.py

********************************************************************************
三、数据可视化：matplotlib.pyplot (mp)

1.基本绘图函数
mp.plot(水平坐标数组, 垂直坐标数组)
x: [1 2 3 4]
y: [5 6 7 8]
代码：plt1.py
mp.plot(..., linestyle=线型, linewidth=线宽, color=颜色)
代码：plt2.py
mp.xlim(左边界, 右边界)
mp.ylim(底边界, 顶边界)
代码：plt3.py
mp.xticks(刻度位置数组, 刻度文本数组)
mp.yticks(刻度位置数组, 刻度文本数组)
代码：plt4.py
ax = mp.gca() # 获取当前坐标轴
ax.spines['left'].set_position(('data', 0))
ax.spines['left'].set_color(颜色)
代码：plt5.py
mp.plot(..., label=图例文本)
mp.legend(loc='upper left')
代码：plt6.py
mp.scatter(水平坐标数组, 垂直坐标数组, marker=点型， s=大小, edgecolor=勾边色,
    facecolor=填充色, zorder=Z序)
代码：plt7.py
mp.annotate(备注文本,
	    xy=目标位置,
    	    xycoords=目标坐标系,
       	    xytext=文本位置,
    	    textcoords=文本坐标系,
    	    fontsize=字体大小,
    	    arrowprops=箭头属性)
代码：plt8.py

2.图形对象
mp.figure(图形对象名, figsize=窗口大小, dpi=分辨率, facecolor=颜色)
代码：fig.py

3.子图
1)缺省布局
mp.subplot(行数, 列数, 图号)
mp.subplot(2, 3, 1)
mp.subplot(231)
代码：sub1.py
2)栅格布局
import matplotlib.gridspec as mg
gs = mg.GridSpec(行数, 列数) # 栅格布局器
mp.subplot(gs[行, 列])
代码：sub2.py
3)自由布局
mp.axes([左下角水平坐标, 左下角垂直坐标, 宽度, 高度]) --- 相对比例
其中所有的尺寸参数都是相对比例。
代码：sub3.py

4.坐标刻度定位器
定位器对象 = mp.xxxLocator(...)
ax = mp.gca()
ax.xaxis.set_major_locator(定位器对象) # 主刻度
ax.xaxis.set_minor_locator(定位器对象) # 次刻度
代码：tick.py

5.散点图
代码：scatter.py

6.区域填充
mp.fill_between(水平坐标数组, 垂直坐标起点数组, 垂直坐标终点数组, 条件, color=颜色, alpha=透明度)
代码：fill.py

7.柱状图
mp.bar(水平坐标数组, 高度数组, ec=边缘颜色,fc=填充颜色, label=标签文本, alpha=透明度)
代码：bar.py

8.等高线图
mp.contour(x, y, z, 线数, colors=颜色, linewidths=线宽)  (有返回值)
	--> return : 等高线对象
    code:
    cntr = mp.contour(x, y, z, 8, colors='black', linewidths=0.5)
    mp.clabel(cntr, inline_spacing=1, fmt='%.1f', fontsize=10)		# clable:给等高线加标签
                  （线和标签的留白间距）
mp.contourf(x, y, z, 线数, cmap=颜色映射)	        # 色带

代码：cntr.py
坐标点：x, y = np.meshgrid(np.linspace(-3, 3, n), np.linspace(-3, 3, n))

9.热像图
mp.imshow(矩阵, cmap=颜色映射,
                      origin=垂直轴方向)
代码：hot.py
10.饼图
mp.pie(值列表, 间隙列表, 标签, 颜色列表, 格式串,
    shadow=是否带阴影, startangle=起始角度)
代码：pie.py
11.三维曲面
from mpl_toolkits.mplot3d import axes3d
ax = mp.gca(projection='3d')
ax.plot_surface(x, y, z, rstride=行距,
    cstride=列距, cmap=颜色映射)
ax.plot_wireframe(x, y, z, rstride=行距,
    cstride=列距, linewidth=线宽, color=颜色)
代码：wf.py、sf.py
12.三维散点
ax.scatter(x, y, z, s=大小, c=颜色, marker=点型)
代码：s3.py
13.极坐标系
mp.gca(projection='polar')
mp.plot ...
mp.scatter ...
x,     y
|       |
v      v
极角 极径
代码：polar.py
14.半对数坐标
mp.semilogy(...)
代码：log.py
15.简单动画
import matplotlib.animation as ma
def 更新函数 (顺序号):
       更新画面帧
ma.FuncAnimation(图形对象, 更新函数,
    interval=间隔时间(毫秒))
--------------------------------------------
def 更新函数 (生成值):
       更新画面帧
def 生成器():
       for ...:
             产生新的数据
             yield 生成值
ma.FuncAnimation(图形对象, 更新函数,
    生成器, interval=间隔时间(毫秒))
代码：bub.py、sig.py
      position    size   growth   color
      float float float float        float float float float
0
1
2
.
.
.99

*******************************numpy的通用函数**************************************
四、numpy的通用函数
1.读取文本文件
numpy.loadtxt(
    文件名,
    delimiter=分隔符,
    usecols=选择列,
    unpack=是否解包,
    dtype=目标类型,
    converters=转换器)->二维数组(unpack=False)/
                                         列一维数组集(unpack=True)

********************************************************************************
2.保存文本文件
numpy.savetxt(
    文件名,
    二维数组,
    delimiter=分隔符,
    fmt=格式)
代码：txt.py、k.py

********************************************************************************
3.算数平均值
样本：S = [s1, s2, ..., sn]
算数平均值：m = (s1+s2+...+sn)/n
numpy.mean(样本数组)->算数平均值
代码：mean.py

********************************************************************************
4.加权平均值
样本：S = [s1, s2, ..., sn]
权重：W=[w1,w2,...,wn]
加权平均值：
a = (s1w1+s2w2+...+snwn)/(w1+w2+...+wn)
numpy.average(样本数组, weights=权重数组)
->加权平均值
成交量加权平均价格(VWAP)
代码：vwap.py
时间加权平均价格(TWAP)
代码：twap.py

********************************************************************************
5.最大值和最小值
1)max/min: 获取一个数组中的最大/最小元素
a:
9 7 5
3 1 8
6 6 1
numpy.max(a)->9
numpy.min(a)->1
2)maximum/minimum: 在两个数组的对应元素之间构造最大值/最小值数组
b:
6 1 9
7 1 7
4 4 5
numpy.maximum(a, b)->
9 7 9
7 1 8
6 6 5
代码：max.py
价格波动范围=最高的最高价-最低的最低价
代码：range.py
3)ptp: 极差，一个数组最大值和最小值之差
numpy.ptp(数组)->数组.max()-数组.min()
价格波动幅度=某一种价格的极差
代码：spread.py

********************************************************************************
6.中位数：将多个样本按照大小顺序排列，居于中间位置的元素即为中位数。
12 23 45 67 89
           ^
12 23 45 67
      \___/
        34
        ^
A: 样本集
L: 样本数
M = (A[(L-1)/2]+A[L/2])/2
numpy.median(数组)->中位数
代码：med.py

********************************************************************************
7.标准差
样本：S = [s1, s2, ..., sn]
均值：m = (s1+s2+...+sn)/n
离差：D = [s1-m, s2-m, ..., sn-m]
方差：v = ((s1-m)^2+(s2-m)^2+...(sn-m)^2)/n
标准差：std = sqrt(v) (方均根离差)
numpy.std(数组, ddof=非自由度)->标准差
总体方差和总体标准差：.../n
样本方差和样本标准差：.../(n-1)
10
50
25 25
代码：var.py

********************************************************************************
8.针对日期的处理
1)星期数据
数组[关系表达式]：关系表达式的值是一个布尔型数组，其中为True的元素对应于数组中满足关系表达式的元素，
以上下标运算的值就是从数组中拣选与布尔数组中为True的元素相对应的元素。
np.where(关系表达式)->数组中满足关系表达式的元素的下标数组。
np.take(数组，下标数组)->数组中由下标数组所标识的元素集合。
代码：week.py
2)星期汇总
np.apply_along_axis(函数, 轴向, 高维数组)
在高维数组中，沿着指定轴向，提起低维子数组，作为参数传递给特定的函数，并将其返回值按照同样的轴向组成成新的数组返回给调用者。
轴向：
二维，0-行方向，1-列方向
三维，0-页方向，1-行方向，2-列方向
代码：axis.py

********************************************************************************
9. 一维卷积
a: [1 2 3 4 5]	-被卷积数组
b: [6 7 8]	-卷积核数组
c = a (x) b = [6   19  40  61  82  67  40] 	-完全卷积 full
	    = [19  40  61  82  67]		-同纬卷积（与a长度相等） same
	    = [40  61  82]			-有效卷积 valid

numpy.convolve(a,b,'full'/'same'/'valid')

note: 卷积运算中 是对卷积核数组进行逆转后再进行运算的
c:对应*后+          6   19  40  61  82  67  40
a	 :  0	0   1   2   3   4   5   0   0
reverse-b:  8   7   6
		8   7   6
		    8   7   6
			8   7   6
			    8	7   6
				8   7   6
				    8   7   6

********************************************************************************
布林带：
中轨：移动均线
上轨：中轨 + 2 * 标准差
下轨：中轨 - 2 * 标准差

********************************************************************************
10 线型模型
y= kx + b
1)线性预测：
 a b c d e f ?

2)线型拟合
kx + b = y
kx1 + b = y1
kx2 + b = y2
...
kxn + b = yn
[x1 1	  k 	 y1
 x2 1  . [ ]  = [ .. ]
 ...      b 	 yn
 xn 1]
  a       x       b
	  = numpy.linalg.lstsq(a, b)[0]

********************************************************************************
11 裁剪 压缩 累乘
1) ndarray.clip(min = 最小值， max = 最大值)
将调用数组中小于min的元素设置为min，大于max的元素设置为max
2) ndarray.compress(条件)
返回调用数组中满足给定条件的元素
3) ndarray.cumprod()
返回调用数组中各元素计算累乘的过程数组

********************************************************************************
12 相关性
离差：
dev(a) = [a1,a2,..., an] - avg(a)

方差：
var(a) = avg( dev(a)**2 )

标准差：
std(a) = sqrt(var(a))
std(b) = sqrt(var(b))

协方差 Covariance：
cov(a,b) = avg(dev(a)*dev(b))     # 两者离差乘积的平均值

相关性系数 correlation coefficient：
coff = cov(a,b) / (std(a)std(b))
范围：[-1,1] 正负表示了相关性的方向为正或反
	     绝对值表示了相关性的强弱
	     绝对值越大相关性越强，越小相关性越弱，0表示不相关

相关性矩阵：
corrcoef_ab = np.corrcoef(a,b)
[var(a)/std(a)std(a)=1  cov(a,b)/std(a)std(b)
 cov(b,a)/std(b)std(a)  var(b)/std(b)std(b)=1
]
numpy.corrcoef(a,b) --> 相关性矩阵
corrcoef_ab = np.corrcoef(a,b)[0,1]

********************************************************************************
13 多项式拟合
f(x) = p0x^n + p1x^n-1 + p2x^n-2 + ... + pn
yn = f(n)

1)已知x,y数据数组和幂值，求参数pi
	numpy.polyfit(自变量数组，函数值数组，最高次幂(n))
	--> [p0,p1,p2,...,pn]
2)已知参数和自变量x数据数组，求函数值数据数组
	numpy.polyval([p0,p1,p2,...,pn], 自变量数组)
	--> 函数值数组
3）多项式根
	numpy.roots([p0,p1,p2,...,pn])
	--> 多项式方程的根
4）导函数系数
	numpy.polyder([p0,p1,p2,...,pn])
	--> 导函数系数数组

********************************************************************************
14 符号数组
a: [10,-20, 30, -50, 0, 60, -70, 0, 51]
1） numpy.sign(a) ---> [1, -1, 1, -1, 0, 1, -1, 0, 1]
2） numpy.piecewise(被判断数组，[条件1，条件2，...]， [标志1，标志2，...])
	--> 满足每个条件的标志数组
>>> x = np.linspace(-2.5, 2.5, 6)
>>> np.piecewise(x, [x < 0, x >= 0], [-1, 1])
    array([-1., -1., -1.,  1.,  1.,  1.])
>>> x = np.linspace(-2.5, 2.5, 6)
>>> np.piecewise(x, [x < 0, x >= 0], [lambda x: -x, lambda x: x])
    array([ 2.5,  1.5,  0.5,  0.5,  1.5,  2.5])

净额成交量（OBV）

********************************************************************************
16 数据平滑与特征值
卷积降噪 --> 曲线拟合 --> 特征值
      卷积降噪：消除随机噪声的干扰
      曲线拟合：获得数学模型
      特征值：反应业务特征



********************************************************************************
五、矩阵和ufunc
1 矩阵
ndarray --> matrix

numpy.matrix(可被解释为矩阵的二维容器，copy=[True/False])  --> 矩阵对象
	# copy 默认为 True, 数据复制，相互独立
  	# copy：False 不复制数据，数据共享，视图view，同时改变
	# a.reshape()/ a.ravel(): 数据共享，同时改变
	# a.flatten() 数据相互独立

numpy.mat(可被解释为矩阵的二位容器)
	# 视图view, 数据共享，相当于copy=False的matrix()

numpy.bmat('A B; C D')  # 矩阵拼接

T:转置矩阵
I:inverse 逆矩阵  A * A.I = e(单位矩阵,对角线为1，其他为0) 
非方阵：i = f.I 广义逆矩阵
a = np.array([[1,2],[3,4]])
b = np.array([[5,6],[7,8]])
c = a * b
矩阵运算规则：http://www2.edu-edu.com.cn/lesson_crs78/self/j_0022/soft/ch0605.html



15 矢量化
1 def 标量函数(标量参数1，标量参数2，...):
   ...
   return 标量返回值1，标量返回值2，...

np.vectrize(标量函数) ---> 矢量函数
矢量函数(矢量参数1， 矢量参数2，...) ---> 矢量返回值1，矢量返回值2，...

2 ufunc: 统一(泛)化函数
1）numpy.frompyfunc(标量函数，参数个数，返回值个数)
	---> numpy.ufunc类型的函数对象
   ufunc函数对象(矢量参数，...) --->  矢量返回值,...

2）numpy.add中的方法
   reduce：累加
   accumulate：累加过程
   reduceat：在指定位置上做累加
   outer：外和
3）numpy中的除法
a.真除
   numpy.divide()
   numpy.true_divide()
b.地板除
   numpy.floor_divide()
c.天花板除
  //
d.截断除

4）余数
   除数 * 商 + 余数 = 被除数
   余数 = 被除数 - 除数 * 商 
  （理论上，对于负数除法，余数会有2个，-7/3：3*(-3)+2；3*(-2)-1 余数：(2,-1)）
   对python而言，除法使商尽可能小，
   因此负数除法 -7/3 商会取-3而不是-2,余数取负余数-1

5）python  numpy中几乎所有的算术和关系运算符都被numpy借助ufunc实现为可对数组操作的矢量化运算符
   如np.array, np.mat都可以自动转化为矢量化运算

6）numpy中的三角函数都是ufunc对象，可以对参数数组中的每个元素进行三角函数运算，并将运算结果以数组形式返回
   x = A sin(at + pi/2)
   y = B sin(bt)
   
   方波的吉布斯现象:矩形方波可以看作无限个正弦波的叠加
   f(t) = 4/pi * sum((sin((2k-1)*t)/(2k-1)))	# k =1,2,3时的信号叠加

********************************************************************************
7）实现位运算的ufunc
a. 异或 ：^ / __xor__ / bitwise_xor
   1 ^ 0 = 1
   1 ^ 1 = 0
   0 ^ 0 = 0
   0 ^ 1 = 1
   if a^b<0 then a和b异号
b. 与：& / __and__ / bitwise_and
   1 & 1 = 1
   1 & 0 = 0
   0 & 1 = 0
   0 & 0 = 0
判断是不是2的幂：
   1  00000001   -1 --> 00000000
   2  00000010   -1 --> 00000001
   4  00000100   -1 --> 00000011
   8  00001000  ....
  16  00010000  ....
巧用：if a & (a-1) == 0 then a 是2的幂 （转化为二进制后进行按位与运算）
     （联想：1000个瓶子c有1瓶毒药，用10只小白鼠试药的方法：1~1000转换为二进制）
c. 移位
   << / __lshift__ / left_shift  （乘2）
   >> / __rshift__ / right_shift （除2）
********************************************************************************

六、Numpy的子模块(random)/（linalg）/（fft）
1. 线性代数模块（linalg）
1）矩阵的逆：inv()
在线性代数中，矩阵A与其逆矩阵A^-1的乘积是一个单位矩阵
注意：np.linalg.inv()求矩阵的逆矩阵前提：矩阵必须是方阵

2）解线性方程组：solve()
   A*X=B	
   np.linalg.solve(A,B)
3）特征值和特征向量：eig
对于n阶方阵A，如果存在数a和非零n维向量x,使得Ax = ax,则称a是矩阵A的一个特征值，x是属于特征值a的特征向量
   eigvals, eigvecs = np.linalg.eig(A)
   egivals = np.linalg.eigvals(A)

4）奇异值分解：svd()
对于一个满足特定条件的矩阵M，可以被分解为三个矩阵的乘积，M=USV, 其中U和V都是正交矩阵，即U*U^T=I, V*V^T=I,S矩阵除了主对角线以外的元素均为0，主对角线上的元素被称为M的奇异值
   U,S,V = numpy.linalg.svd(M)	S只返回主对角线上的元素即奇异值

5）广义逆矩阵：pinv()
   np.linalg.pinv()    (m,n) --> (n,m)
6）行列式：det  (方阵才有行列式)
   numpy.linalg.det(方阵) --> 行列式的值，标量
a b c  = a(ei-fh)-b(di-fg)+c(dh-ge)
d e f
g h i

2. 快速傅里叶变换模块（fft）：时间域的函数 ---fft---> 频率域的函数
   （离散）
s = F(t) -->  (A/P, u) = G(f)
               A也可以用能力P表示
y = Asin(wt+u) A:振幅，w:角频率， u：初相位
w1 -> A1,u1
w2 -> A2,u2
...
(A, u) = f(w) :  (A, u) ==》
	---->
3. 随机数模块(random)
1）二项式分布
   numpy.random.binomial(n, p, size) 
	--> 返回值：包含size个随机数的数组，其中每个随机数来自n次尝试中的成功次数。 备注：p是独立事件成功的概率
2）超几何分布
   numpy.random.hypergeometric(ngood, n100bad, nsample, size)
	--> 返回值：包含size个随机数的数组，其中每个随机数来自随机抽取nsample个样本中好样本的个数。 备注：总样本中共有ngood个好样本，nbad个坏样本
摸球游戏：25个好球和1个坏球放一起，每轮摸3个，全为好球加1分，有坏球减6粉，模拟100轮，记录分值的变化 。 numpy.random.hypergeometric(25,1,3,100)
3）正态分布

********************************************************************************
七、numpy的专用函数
1. 间接联合排序
间接：获取排序样本的下标
原始数列：8 2 3 1 7 4 6 5 9
直接排序：1 2 3 4 5 6 7 8 9
间接排序：3 1 2 5 7 6 4 0 8 （原始序列元素的下标）
姓名：张三  李四  王五  赵六  陈七
成绩：90     70    50    80    60
下标：0      1     2     3     4
成绩升序对应的下标：2 4 1 3 0
年龄：20     30    30    20    40 （有相同值，对年龄排序时参考成绩进行联合排序）
下标：
联合排序对应的下标：3 0 2 1 4（年龄升序）
   numpy.lexsort((参考序列，待排序列)) ---> return：索引序列
   np.sort_complex(复数数组) ---> 按实部的升序排列，实部相同的参考虚部的升序排列

2. 最大值和最小值
numpy.xxx
max / min
argmax / argmin
nanmax / nanmin
nanargmax / nanargmin
------------------------
arg：间接，返回下标
nan：忽略无效值
a = np.array([2,6,np.nan, -15,89,-5, np.nan])
print(np.max(a), np.min(a), a.max(0))
print(np.argmax(a), np.min(a), a.argmax(),a.max())
'''nan nan nan
   2 nan 2 nan'''

3 有序插入
有序序列：[1,2,4,5,6,8,9]
被插序列插入到有序序列什么位置才能使结果仍然有序？
numpy.searchsorted(有序序列， 被插序列)  --> return: 插入位置
numpy.insert(目标序列，插入位置，被插序列) --> return:插入结果

a = np.array([1,4,5,8,9,10,12,37])
b = np.array([3,14])
np.searchsorted(a,b)
Out[334]: array([1, 7], dtype=int64)
c = np.searchsorted(a,b)
d = np.insert(a, [2,4], b)
d
Out[337]: array([ 1,  4,  3,  5,  8, 14,  9, 10, 12, 37])
aa = np.array([1,14,5,28,9,10,12,37])
bb = np.array([3,4])
np.searchsorted(aa, bb)
Out[340]: array([1, 1], dtype=int64)
bb = np.array([3,11])
np.searchsorted(aa, bb)		# 有序数列无序也可以插入，不过没意义
Out[342]: array([1, 6], dtype=int64)


4. 定积分
import scipy.integrate as si
def f(x)：
    y = ...x...
    return y
si.quad(f, a, b)[0]  # 定积分值

 
5. 插值
si.inter1d(离散样本水平坐标， 离散样本垂直坐标, kind=插值器种类) ---> 一维插值器对象
一维插值器对象（插值样本水平坐标） ---> 插值样本垂直坐标

6. 金融计算
1）绘制K线图
绘制K线图
import mpl_finance as mf
mf.candlestick_ohlc(坐标图对象，日期和开高低收价格数组，k线实体部分宽度(0-1),
                    阳线颜色，阴线颜色)

2）
存款相关：
终值fv = np.fv(利率，期数，每期支付，现值)
将1000元以1%的年利率存入银行5年，每年加存100元，到期后本息合计多少钱？
现值pv = np.pv(利率，期数，每期支付，终值)
将多少钱以1%的年利率存入银行5年，每年加存100元，到期后本息合计fv元？
净现值npv = np.npv(利率，现金流)
将1000元以1%的年利率存入银行5年，每年加存100元,相当于一次性存入多少钱？
内部收益率irr = np.irr(现金流)             # 使净现值为0的内部收益率
将1000元存入银行5年，以后逐年体现100元，200，300，400，500， 银行年利
率达到多少，可在最后一次提现后偿清全部利息，即净现值为0

贷款相关：
每期支付 pmt = np.pmt(利率， 期数， 现值)   # 默认终值==0 还清贷款
期数 nper = np.nper(利率， 每期支付， 现值)
利率 rate = np.rate(期数，每年支付，现值，终值)


































