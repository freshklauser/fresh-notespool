# test for:
	correct_prediction = tf.equal(tf.argmax(y_conv, 1), tf.argmax(y, 1))  # why 1 instead of 0
	accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))


# 假定：一行一特征，一列一样本
a = tf.convert_to_tensor(np.array([3,2,54,61,4,12]).reshape((2,3)))
a
Out[23]: <tf.Tensor 'Const_5:0' shape=(2, 3) dtype=int32>

np.array([3,2,54,61,4,12]).reshape((2,3))
Out[24]: 
array([[ 3,  2, 54],
       [61,  4, 12]])

with tf.Session() as sess:
    print(sess.run(tf.argmax(a)))         # default:axis=0
    print(sess.run(tf.argmax(a)).shape)
Out:
[1 1 0]      # axis=0,沿着行方向(即第i列)查找最大值在该列的索引位置
(3,)         # NOTE: tf.argmax()返回的结果减少了axis指定的维(2d->1d)，因此是(3,) 不是(1,3)  

with tf.Session() as sess:
    print(sess.run(tf.argmax(a,1)))
    print(sess.run(tf.argmax(a,1)).shape)
Out:
[2 0]
(2,)


b = tf.convert_to_tensor(np.array([13,223,54,61,24,42]).reshape((2,3)))

np.array([13,223,54,61,24,42]).reshape((2,3))
Out[29]: 
array([[ 13, 223,  54],
       [ 61,  24,  42]])
	   
分类结果对比：tf.equal()
ee = tf.equal(tf.argmax(a,0),tf.argmax(b,0))
with tf.Session() as sess:
    print(sess.run(ee))
Out:
[ True False  True]     # 3个样本分类结果 第1和3个样本正确分类，第2个错误分类

3个样本的分类正确率：
accuracy = tf.reduce_mean(tf.cast(ee, tf.float32))
with tf.Session() as sess:
    print(sess.run(accuracy))
Out：
0.6666667               # 2/3 = 0.66666667

e = tf.equal(tf.argmax(a,1),tf.argmax(b,1))
e
Out[38]: <tf.Tensor 'Equal:0' shape=(2,) dtype=bool>
with tf.Session() as sess:
    print(sess.run(e))
Out:
[False  True]            # 没有意义
acc = tf.reduce_mean(tf.cast(e,tf.float32))

with tf.Session() as sess:
    print(sess.run(acc))    
Out:   
0.5



# 关于 tf.argmax():
a = tf.convert_to_tensor(np.array([3,2,54,44,81,41,2,13,53,123,44,61,4,12,123,53,76,44,55,83,12,34,23,76]).reshape((2,3,4)))

np.array([3,2,54,44,81,41,2,13,53,123,44,61,4,12,123,53,76,44,55,83,12,34,23,76]).reshape((2,3,4))
Out[54]: 
array([[[  3,   2,  54,  44],
        [ 81,  41,   2,  13],
        [ 53, 123,  44,  61]],

       [[  4,  12, 123,  53],
        [ 76,  44,  55,  83],
        [ 12,  34,  23,  76]]])

with tf.Session() as sess:
    print(sess.run(tf.argmax(a)))
    print(sess.run(tf.argmax(a)).shape)
    
[[1 1 1 1]
 [0 1 1 1]
 [0 0 0 1]]
(3, 4)

with tf.Session() as sess:
    print(sess.run(tf.argmax(a,0)))
    print(sess.run(tf.argmax(a,0)).shape)
    
[[1 1 1 1]
 [0 1 1 1]
 [0 0 0 1]]
(3, 4)

with tf.Session() as sess:
    print(sess.run(tf.argmax(a,1)))
    print(sess.run(tf.argmax(a,1)).shape)
    
[[1 2 0 2]
 [1 1 0 1]]
(2, 4)

with tf.Session() as sess:
    print(sess.run(tf.argmax(a,2)))
    print(sess.run(tf.argmax(a,2)).shape)
    
[[2 0 1]
 [2 3 3]]
(2, 3)